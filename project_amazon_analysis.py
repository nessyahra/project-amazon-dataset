# -*- coding: utf-8 -*-
"""Project Amazon Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10NexF3FbXGm6sAKuRQRv1DzP8zImgBwP

# **Importing Data**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('amazon.csv')
data.head()

data.info()

missing_value = data.isnull().sum()
print(missing_value[missing_value>0])

"""# **Cleaning Data**"""

# Check duplicate
data[data.duplicated()]

# Change data types from object to float
data['discounted_price'] = data['discounted_price'].str.replace('₹','').str.replace(',','').astype('float64')

# Change data types of actual price to float
data['actual_price'] = data['actual_price'].str.replace('₹','')
data['actual_price'] = data['actual_price'].str.replace(',','')
data['actual_price'] = data['actual_price'].astype('float64')

# Change data types of discount percentage to float
data['discount_percentage'] = data['discount_percentage'].str.replace('%','').astype('float64')

# Change data types of rating count to float
data['rating_count'] = data['rating_count'].str.replace(',','').astype('float64')

data['rating'].unique()

# We found an invalid value, so we need to change it to NaN first
data['rating'] = data['rating'].str.replace(r'\|','', regex=True)

# Change data type of rating to float
data['rating'] = pd.to_numeric(data['rating'], errors='coerce')

# Replace the NaN value with mode
data['rating'] = data['rating'].fillna(data['rating'].mode()[0])

# Handle missing values
# Replace with median
data['rating_count'] = data['rating_count'].fillna(data['rating_count'].median())

data.describe()

missing_value = data.isnull().sum()
print(missing_value[missing_value>0])

"""# **Data Visualization**"""

data.head()

# Split the category columns to main category and sub-category by the split symbol
data['main_category'] = data['category'].astype(str).str.split('|').str[0]
data['sub_category'] = data['category'].astype(str).str.split('|').str[-1]

"""
### 1.   Data distribution of products by main category and sub category


---

Plot digunakan untuk menunjukkan bagaimana distribusi dan jumlah produk di setiap kategori

"""

# Check the products by main category
maincategory = data['main_category'].value_counts().reset_index()
maincategory.columns = ['main_category', 'count']
maincategory

# Visualize for distribution of products by main category
plt.figure(figsize=(10,5))
sns.barplot(
    data = maincategory,
    y = 'main_category',
    x = 'count',
    palette = sns.color_palette('Set3')
)
plt.title('Distribution Products by Main Category', loc='center', fontsize=15)
plt.xlabel('Number of products')
plt.ylabel('Main Category')
plt.show()

"""Berdasarkan visualisasi distribusi produk menurut kategori utama, diketahui bahwa jumlah produk terbanyak berasal dari kategori Electronics. Hal ini menunjukkan bahwa pengguna Amazon cenderung lebih sering melakukan pembelian pada kategori tersebut."""

# Check the distribution products by sub category
subcat = data['sub_category'].value_counts().reset_index()
subcat.columns = ['sub_category', 'count']
subcat10 = subcat.head(10)

# Visualize
plt.figure(figsize=(10,5))
sns.barplot(
    data = subcat10,
    y = 'sub_category',
    x = 'count',
    palette = 'pastel'
)
plt.title('Distribution TOP 10 Products by Sub Category')
plt.ylabel('Sub Category')
plt.xlabel('Number of products')
plt.show()

"""Plot dibuat untuk menggambarkan distribusi 10 sub kategori teratas dengan jumlah produk terbanyak. Berdasarkan hasil visualisasi, sub kategori USB Cables menempati posisi teratas sebagai sub kategori dengan jumlah produk terbanyak yang tersedia atau paling banyak dibeli.

### 2.   Distribution of customers rating

---

Untuk melihat bagaimana distribusi rating customer terhadap setiap produk di Amazon
"""

plt.hist(data['rating'])
plt.title('Customer Rating Distribution')
plt.xlabel('Rating')
plt.ylabel(None)

cust_rating = data.groupby('main_category')['rating'].mean().sort_values(ascending=False).reset_index()
cust_rating.columns = ['main_category', 'average_rating']
cust_rating

# Visualize
plt.figure(figsize=(10,5))
sns.barplot(
    data = cust_rating,
    y = 'main_category',
    x = 'average_rating',
    palette = 'pastel'
)
plt.title('Distribution of Customer Rating for each Main Category')
plt.ylabel('Main Category')
plt.xlabel('Average ratings')
plt.show()

"""Berdasarkan plot di atas, kategori utama dengan rata-rata rating tertinggi adalah Office Products. Sementara itu, Electronics yang memiliki jumlah produk terbanyak justru berada di posisi tengah dalam hal rata-rata rating. Hal ini dapat disebabkan oleh keragaman kualitas produk dalam kategori yang populer seperti Electronics, mulai dari produk dengan kualitas rendah hingga tinggi, sehingga secara keseluruhan menurunkan rata-rata rating pada kategori tersebut.

### 3.   Discount Percentage and Price Distribution

---
Untuk melihat bagaimana distribusi persenan diskon dan harga untuk setiap kategorinya
"""

discount_main = data.groupby('main_category')['discount_percentage'].mean().sort_values(ascending=False).reset_index()
discount_main.columns = ['main_category', 'avg_discount']
discount_main

plt.figure(figsize=(10,5))
sns.barplot(
    data = discount_main,
    y = 'main_category',
    x = 'avg_discount',
    palette = 'pastel'
)
plt.title('Distribution of Discount Percentage by Main Category')
plt.ylabel('Main Category')
plt.xlabel('Average discount')
plt.show()

"""Berdasarkan plot di atas, diketahui bahwa kategori Home Improvement memiliki rata-rata diskon tertinggi, mendekati 60%. Produk dalam kategori ini cenderung mendapatkan potongan harga yang besar sebagai strategi untuk mendorong penjualan, yang kemungkinan disebabkan oleh permintaan yang relatif rendah atau tingginya persaingan antar produk dalam kategori tersebut."""

disc_sub = data.groupby('sub_category')['discount_percentage'].mean().sort_values(ascending=False).reset_index().head(10)
disc_sub.columns = ['sub_category', 'avg_discount']
disc_sub

plt.figure(figsize=(10,5))
sns.barplot(
    data = disc_sub,
    y = 'sub_category',
    x = 'avg_discount',
    palette = 'pastel'
)
plt.title('Distribution of Discount Percentage by Sub Category')
plt.ylabel('Sub Category')
plt.xlabel('Average discount')
plt.show()

"""Visualisasi dilakukan terhadap 10 sub kategori dengan rata-rata diskon tertinggi. Berdasarkan hasil plot, sub kategori seperti Cable Connection Protectors, Earpads, dan Phone Charms menunjukkan rata-rata diskon yang tinggi, mencapai sekitar 90%. Pemberian diskon besar ini kemungkinan merupakan strategi untuk mendorong penjualan, yang dapat disebabkan oleh rendahnya minat konsumen atau tingginya tingkat persaingan produk dalam sub kategori tersebut."""

price1 = data.groupby('main_category')['actual_price'].mean().reset_index()
price2 = data.groupby('sub_category')['actual_price'].mean().reset_index().head(10)

price1.columns = ['main_category', 'avg_price']
price2.columns = ['sub_category', 'avg_price2']

print(price1)
print(price2)

fig, axes = plt.subplots(1, 2, figsize=(16, 6))

# Main category
sns.barplot(
    data = price1,
    x = 'avg_price',
    y = 'main_category',
    palette = 'pastel',
    ax = axes[0]
)
axes[0].set_title('Average Price by Main Category')
axes[0].set_xlabel('Average Price')
axes[0].set_ylabel('Main Category')

# Sub Category
sns.barplot(
    data = price2,
    x = 'avg_price2',
    y = 'sub_category',
    palette = 'pastel',
    ax = axes[1]
)
axes[1].set_title('Average Discount by Category')
axes[1].set_xlabel('Average Discount (%)')
axes[1].set_ylabel('')

plt.show()

"""### 4.   WordCloud from Review

---
Digunakan untuk melihat kata apa yang paling sering muncul dalam review



"""

!pip install wordcloud

import nltk
from nltk.corpus import stopwords
from wordcloud import WordCloud

# Download and load the stopwords
nltk.download('stopwords')
stopwords_set = set(stopwords.words('english'))

# Joint all of the review in one string
text = ' '.join(data['review_content'].dropna().astype(str).tolist())

# Wordcloud
wordcloud = WordCloud(
    width = 800,
    height = 400,
    background_color = 'white',
    colormap = 'plasma',
    max_words = 200,
    stopwords = stopwords_set
).generate(text)

plt.figure(figsize=(12,6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Wordcloud of Review Content')
plt.show()

"""Berdasarkan wordcloud yang dihasilkan, kata-kata yang paling menonjol seperti 'good', 'easy', 'use', dan 'cable' menunjukkan bahwa kata-kata tersebut paling sering muncul dalam ulasan pelanggan. Temuan ini selaras dengan distribusi produk berdasarkan sub kategori, di mana USB Cable tercatat sebagai sub kategori dengan jumlah produk terbanyak. Hal ini mengindikasikan bahwa produk dalam sub kategori tersebut kemungkinan besar menjadi objek ulasan oleh banyak pelanggan.

# **Correlation**

Calculate the correlation between discounted and actual price to rating
"""

# Discounted price
correlation = data[['rating', 'discounted_price']].corr()
print(correlation)

plt.figure(figsize=(10,5))
sns.regplot(data=data, y='discounted_price', x='rating', line_kws={'color' : 'red'})
plt.title('Correlation Between Rating and Discounted Price')
plt.ylabel('Discounted Price')
plt.xlabel('Rating')
plt.show()

"""Berdasarkan visualisasi hasil korelasi antara rating dengan discounted price terlihat bahwa garis tren (merah) naik sedikit ke kanan yang menunjukkan bahwa semakin tinggi rating maka rata-rata harga diskon sedikit meningkat. Namun, kemiringannya sangat kecil sehingga hubungan keduanya sangat lemah. Data tersebut memiliki variansi atau persebaran data yang sangat tinggi sehingga rating tidak secara konsisten berkaitan dengan harga diskon."""

# Actual Price
correlation1 = data[['rating', 'actual_price']].corr()
print(correlation1)

plt.figure(figsize=(10,5))
sns.regplot(data=data, y='actual_price', x='rating', line_kws={'color' : 'red'})
plt.title('Correlation Between Rating and Actual Price')
plt.ylabel('Actual Price')
plt.xlabel('Rating')
plt.show()

"""Berdasarkan hasil visualisasi korelasi antara rating dan harga asli, tampak bahwa garis tren (merah) sedikit menanjak ke arah kanan yang mengindikasikan bahwa semakin tinggi rating maka rata-rata harga asli cenderung sedikit lebih tinggi. Hasil ini memberikan visualisasi yang mirip dengan korelasi antara rating dengan harga diskon. Kemiringan garus tersebut sangat landai sehingga menunjukkan hubungan keduanya tergolong lemah. Data juga menunjukkan adanya tingkat penyebaran harga yang tinggi, menandakan bahwa besarnya harga asli tidak memiliki keterkaitan yang konsisten terhadap rating."""

correlation_matrix = data.corr(method='pearson', numeric_only=True)
plt.figure(figsize=(10,5))

# Create heatmap
sns.heatmap(
    correlation_matrix,
    annot = True,
    fmt = '.2f',
    cmap = 'coolwarm'
)

plt.title('Correlation Matrix', fontsize=15)
plt.xlabel(None)
plt.ylabel(None)
plt.show()

# Change the object data type
for col in data.select_dtypes(include=['object']).columns:
    data[col] = data[col].astype('category').cat.codes

data.corr()['rating'].sort_values(ascending=False)

plt.figure(figsize=(15,8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""Berdasarkan visualisasi correlation matrix diperoleh hasil korelasi untuk setiap features dalam data pembelian di Amazon dataset. Untuk melihat features yang paling berpengaruh terhadap rating produk adalah:

*   actual_price = 0.122
*   discounted_price = 0.120
*   rating_count = 0.102

Produk dengan harga aktual lebih tinggi cenderung memiliki rating sedikit lebih baik, begitu pula dengan harga diskon yang juga berbanding lurus dengan rating. Rating count menunjukkan bahwa produk dengan rating lebih banyak cenderung memiliki rating yang sedikit lebih tinggi, namun ketiga features yang memiliki korelasi paling tinggi dengan rating hanya memberikan hubungan yang lemah karena semua korelasi hampir mendekati 0 tidak mendekati 1. Sehingga hubungan features yang disebutkan memiliki hubungan yang lemah dengan rating.

"""